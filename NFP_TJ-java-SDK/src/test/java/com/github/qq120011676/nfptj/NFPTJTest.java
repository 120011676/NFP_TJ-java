/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.qq120011676.nfptj;

import com.github.qq120011676.nfptj.enums.VehicleEnergyTypeEnum;
import com.github.qq120011676.nfptj.enums.VehiclePlateColorCodeEnum;
import com.github.qq120011676.nfptj.enums.VehicleTypeEnum;
import com.github.qq120011676.nfptj.ro.DriverRO;
import com.github.qq120011676.nfptj.ro.VehicleRO;
import com.github.qq120011676.nfptj.ro.WaybillRO;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import javax.xml.bind.JAXBException;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Objects;
import java.util.UUID;

class NFPTJTest {
    String userId = "1158";
    String password = "bwzppo7yj4";
    String publicKey = "3059301306072a8648ce3d020106082a811ccf5501822d03420004f228e9d80fe12e628d9e8106d9a6c236eaa63d00ae47888bc3217ceb7002953cd458eccbdc6f75aacb9c21e84689b6b0b9b2d79b9c96efeba5dca2e9998873ce";
    String baseUrl = "http://218.67.246.252:6999";

    @Test
    void applyTokenTest() {
        NFPTJ nfptj = new NFPTJ(userId, password, publicKey, baseUrl);
        Assertions.assertNotNull(nfptj.applyToken(), "测试【获取令牌】接口失败");
    }

    @Test
    void driverTest() throws JAXBException, IOException {
        DriverRO ro = new DriverRO();
        ro.setBodys(new ArrayList<>());
        DriverRO.Body body = new DriverRO.Body();
        ro.getBodys().add(body);
        body.setDriverName("姓名");
        body.setDrivingLicense("012345678901234567");
        body.setVehicleClass("A1");
        body.setIssuingOrganizations("驾驶证发证机关");
        body.setValidPeriodFrom("20000101");
        body.setValidPeriodTo("29991231");
        body.setQualificationCertificate("abc");
        body.setTelephone("15812345678");
        body.setRemark("备注");
        NFPTJ nfptj = new NFPTJ(userId, password, publicKey, baseUrl);
        Assertions.assertTrue(nfptj.driver(ro), "测试发送【驾驶员信息】失败");
    }

    @Test
    void vehicleTest() throws JAXBException, IOException {
        VehicleRO ro = new VehicleRO();
        ro.setBodys(new ArrayList<>());
        VehicleRO.Body body = new VehicleRO.Body();
        ro.getBodys().add(body);
        body.setVehicleNumber("津A12345");
        body.setVehiclePlateColorCode(Objects.requireNonNull(VehiclePlateColorCodeEnum.parse("绿色")).getValue());
        body.setVehicleType(Objects.requireNonNull(VehicleTypeEnum.parse("重型集装箱车")).getValue());
        body.setOwner("所有人");
        body.setUseCharacter("使用性质");
        body.setVin("车辆识别代号");
        body.setIssuingOrganizations("发证机关");
        body.setRegisterDate("20000101");
        body.setIssueDate("20000101");
        body.setVehicleEnergyType(Objects.requireNonNull(VehicleEnergyTypeEnum.parse("汽油")).getValue());
        body.setVehicleTonnage("30.00");
        body.setGrossMass("30.00");
        body.setRoadTransportCertificateNumber("道路运输证号");
        body.setTrailerVehiclePlateNumber("挂车牌照号");
        body.setRemark("备注");
        NFPTJ nfptj = new NFPTJ(userId, password, publicKey, baseUrl);
        Assertions.assertTrue(nfptj.vehicle(ro), "测试发送【车辆信息】失败");
    }

    @Test
    void waybillTest() throws JAXBException, IOException {
        WaybillRO ro = new WaybillRO();
        ro.setBodys(new ArrayList<>());
        WaybillRO.Body body = new WaybillRO.Body();
        ro.getBodys().add(body);
        body.setOriginalDocumentNumber(UUID.randomUUID().toString().replaceAll("-", ""));
        body.setShippingNoteNumber(UUID.randomUUID().toString().replaceAll("-", ""));
        body.setVehicleAmount(2);
        body.setSerialNumber("0000");
        body.setTransportTypeCode(Objects.requireNonNull(WaybillRO.Body.TransportTypeCodeEnum.parse("公铁水空联运")).getValue());
        body.setSendToProDateTime(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss")));
        body.setCarrier("网络货运经营者名称");
        body.setUnifiedSocialCreditIdentifier("统一社会信用代码");
        body.setConsignmentDateTime(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss")));
        body.setBusinessTypeCode(Objects.requireNonNull(WaybillRO.Body.BusinessTypeCodeEnum.parse("集装箱运输")).getValue());
        body.setDespatchActualDateTime(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss")));
        body.setGoodsReceiptDateTime(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss")));
        body.setConsignorInfos(new ArrayList<>());
        WaybillRO.Body.ConsignorInfoRO consignorInfoRO = new WaybillRO.Body.ConsignorInfoRO();
        body.getConsignorInfos().add(consignorInfoRO);
        consignorInfoRO.setConsignor("托运人名称");
        consignorInfoRO.setConsignorID("托运人统一社会信用代码或个人证件号");
        consignorInfoRO.setPlaceOfLoading("装货地址");
        consignorInfoRO.setCountrySubdivisionCode("装货地点的国家行政区划代码");
        NFPTJ nfptj = new NFPTJ(userId, password, publicKey, baseUrl);
        Assertions.assertTrue(nfptj.waybill(ro), "测试发送【电子运单】失败");
    }
}
